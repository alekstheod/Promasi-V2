<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0049)http://swiftgantt.pcriot.com/zh_CN/tutorials.html -->
<HTML><HEAD><TITLE>Gantt Chart - Free Java Swing Gantt Chart Component</TITLE><LINK 
href="favicon.ico" rel="SHORTCUT ICON"><LINK 
href="tutorials_zh_CN.files/default.css" type=text/css rel=stylesheet>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="甘特图, 组件, gantt, gantt chart, java, swing, component, free" 
name=Keywords>
<SCRIPT language=JavaScript src="tutorials_zh_CN.files/common.js"></SCRIPT>

<META content="MSHTML 6.00.2900.5512" name=GENERATOR></HEAD>
<BODY 
onload="include('head.html', includeHead); include('copyright.html', includeCopyright);">
<DIV align=center>
<TABLE id=table1 cellSpacing=0 cellPadding=0 width=800 border=0>
  <TBODY>
  <TR>
    <TD height=73><!-- Head of Each Page -->
      <DIV id=head></DIV></TD></TR>
  <TR><!-- Separate Bar -->
    <TD><IMG height=6 src="tutorials_zh_CN.files/hline_center.png" width=742 
      border=0> </TD></TR>
  <TR>
    <TD width="99%">
      <TABLE id=table7 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top 
        width="60%"><B>SwiftGantt编程指南</B><BR><BR></TD></TR></TBODY></TABLE>
      <TABLE id=table6 cellSpacing=1 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD>
            <H5>使用SwiftGantt需要引用的jar文件（在下载的SwiftGantt软件包中可以找到）： 
            <BLOCKQUOTE>
              <P 
              class=src>commons-collections-3.2.jar<BR>commons-lang-2.2.jar<BR>commons-io-1.3.2.jar<BR>log4j-1.2.15.jar<BR>swiftcommon-0.3.x.jar<BR>swiftgantt-0.3.x.jar<BR></P></BLOCKQUOTE></H5></TD></TR>
        <TR>
          <TD><B>&lt;一&gt;. SwiftGantt快速上手.</B> 
            <BLOCKQUOTE>
              <H5>以下是使用SwiftGantt的一般步骤，完成这些步骤就可以展现最基本的甘特图：<BR><BR>1. 
              首先初始化一个甘特图的主类org.swiftgantt.GanttChart,是一个继承自javax.swing.JScrollPanel的Swing的组件，通过它就可以用来显示甘特图：<BR>
              <P class=src>GanttChart gantt = new GanttChart();</P><BR>2. 
              设置甘特图的时间刻度的单位，如以日为单位，则时间轴上的每一刻度代表某一天：<BR>
              <P class=src>gantt.setTimeUnit(TimeUnit.Day);</P><BR>3. 
              配置甘特图,在这里您可以通过Config类配置您的甘特图，您可以设置甘特图各个元素的颜色，宽度。从0.3.0版本开始，您可以设置每周工作时间区间和每日的工作时间区间，以灵活适应不同的实际情况，详细配置项请参考API文档中的Config类的说明。<BR>
              <P class=src>Config config = 
              gantt.getConfig();<BR>config.setWorkingTimeBackColor(Color.YELLOW);//设置工作时间背景色<BR>config.setTimeUnitWidth(50);//设置时间单位的显示宽度<BR>config.setWorkingDaysSpanOfWeek(new 
              int[]{Calendar.MONDAY, Calendar.THURSDAY})//设置每周工作开始日与结束日。<BR>... 
              </P>4. 
              创建甘特图的数据模型GanttModel，所有的您要显示的项目任务信息都通过GanttModel来提供给GanttChart对象。<BR>
              <P class=src>GanttModel model = new GanttModel();<BR></P>5. 
              设置项目开始时间和结束时间： 
              <P class=src>model.setKickoffTime(new GregorianCalendar(2008, 0, 
              1));<BR>model.setDeadline(new GregorianCalendar(2008, 0, 
              30));<BR></P><BR>6. 
              创建甘特图的基本元素：任务对象Task。一个Task对象在甘特图中表现为一条横线。每个Task对象都可以包含任意多的子Task对象，形成树状的任务模型。如果一个Task对象包含子Task，则自动成为对象组，对象组仍然是Task对象，但是在甘特图中显示为不同的形状。如下例，taskGroup就是任务组，包含了两个子任务，task1和task2： 

              <P class=src>Task taskGroup = new Task("My Work 1", new 
              GregorianCalendar(2008, 0, 1), new GregorianCalendar(2008, 0, 
              30));<BR>Task task1 = new Task("Sub-task 1", new 
              GregorianCalendar(2008, 0, 1), new GregorianCalendar(2008, 0, 
              5));<BR>Task task2 = new Task();<BR>task2.setName("Sub-task 
              2");<BR>task2.setStart(new GregorianCalendar(2008, 0, 
              6));<BR>task2.setEnd(new GregorianCalendar(2008, 0, 
              18));//从0.3.0版本开始，设置任务的结束时间也包含在整个任务时间之内<BR><BR>taskGroup.add(new 
              Task[]{task1, task2});<BR></P><BR>7. 
              指定任务之间的依赖关系。如果一项任务需要在另一项任务完成之后才能开始，那么需要将另一项任务设为此任务的前置任务。从0.3.0版本开始，您可以给一个任务添加多个前置任务。 

              <P class=src>task2.addPredecessor(task1);<BR></P><BR>8. 
              将主任务组加入甘特图的Model中并将model对象传递给GanttChart： 
              <P class=src>model.addTask(taskGroup);<BR>gantt.setModel(model); 
              </P><BR>这时GanttChart就可以显示出甘特图来了。 
              <P class=src></H5></P></BLOCKQUOTE></TD></TR>
        <TR>
          <TD><B>&lt;二&gt;. 将甘特图保存为图片文件。</B><BR>
            <BLOCKQUOTE>
              <H5>SwiftGantt可以将显示出来的甘特图保存为png和jpeg格式的图片文件，这个功能对于B/S的Web应用特别有用，您可以在Web应用后台生成一个静态的SwiftGantt的实例（Singleton）作为甘特图图片文件的生成器，将需要显示的项目信息生成图片，显示给前端用户的浏览器。如： 

              <P class=src>static GanttChart gantt = new GanttChart(); 
              </P><BR>将项目信息添加到Model中： 
              <P class=src>GanttModel model = new GanttModel();<BR>... 
              </P><BR>将model指派给静态的GanttChart实例： 
              <P class=src>gantt.setModel(model); </P><BR>指定路径，生成图片： 
              <P class=src>String filePath = 
              "...";<BR>gantt.generateImageFile(filePath); 
              </P><BR>这样在您指定的路径就有生成的甘特图图片文件了。<BR><BR>请注意，SwiftGantt 
              不是线程安全的，请在GanttChart上同步这些方法的调用。如： 
              <P 
              class=src>synchronized(gantt){<BR>&nbsp;&nbsp;&nbsp;&nbsp;gantt.setModel(model);<BR>&nbsp;&nbsp;&nbsp;&nbsp;gantt.generateImage(filePath);<BR>}<BR></P><BR></H5></BLOCKQUOTE></TD></TR>
        <TR>
          <TD></TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD><!-- Separate Bar --><IMG height=6 
      src="tutorials_zh_CN.files/hline_center.png" width=742 border=0> <!-- The Copyright -->
      <DIV id=copyright></DIV></TD></TR></TBODY></TABLE></DIV>
</BODY></HTML>
