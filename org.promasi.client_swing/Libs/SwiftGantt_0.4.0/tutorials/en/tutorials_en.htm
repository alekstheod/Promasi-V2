<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0046)http://swiftgantt.pcriot.com/en/tutorials.html -->
<HTML><HEAD><TITLE>Gantt Chart - Free Java Swing Gantt Chart Component</TITLE><LINK 
href="favicon.ico" rel="SHORTCUT ICON"><LINK 
href="tutorials_en.files/default.css" type=text/css rel=stylesheet>
<META http-equiv=Content-Type content="text/html; charset=UTF-8">
<META content="gantt, gantt chart, java, swing, component, free" name=Keywords>
<SCRIPT language=JavaScript src="tutorials_en.files/common.js"></SCRIPT>

<META content="MSHTML 6.00.2900.5512" name=GENERATOR></HEAD>
<BODY 
onload="include('head.html', includeHead); include('copyright.html', includeCopyright);">
<DIV align=center>
<TABLE id=table1 cellSpacing=0 cellPadding=0 width=800 border=0>
  <TBODY>
  <TR>
    <TD height=73><!-- Head of Each Page -->
      <DIV id=head></DIV></TD></TR>
  <TR><!-- Separate Bar -->
    <TD><IMG height=6 src="tutorials_en.files/hline_center.png" width=742 
      border=0> </TD></TR>
  <TR>
    <TD width="99%">
      <TABLE id=table7 width="100%" border=0>
        <TBODY>
        <TR>
          <TD vAlign=top width="60%"><B>SwiftGantt development 
            tutorials</B><BR><BR></TD></TR></TBODY></TABLE>
      <TABLE id=table6 cellSpacing=1 cellPadding=0 border=0>
        <TBODY>
        <TR>
          <TD>
            <H5>Jar files(find in SwiftGantt distribution) that SwiftGantt 
            component requires are: 
            <BLOCKQUOTE>
              <P 
              class=src>commons-collections-3.2.jar<BR>commons-lang-2.2.jar<BR>commons-io-1.3.2.jar<BR>log4j-1.2.15.jar<BR>swiftcommon-0.3.x.jar<BR>swiftgantt-0.3.x.jar<BR></P></BLOCKQUOTE></H5></TD></TR>
        <TR>
          <TD><B>&lt;1&gt;. SwiftGantt getting started.</B> 
            <BLOCKQUOTE>
              <H5>Here are some common approaches for using SwiftGantt, you can 
              have simple Gantt Chart step by step.<BR><BR>1. Construct the main 
              class org.swiftgantt.GanttChart of SwiftGantt first, which
              is inherited from Swing component javax.swing.JScrollPanel. <BR>
              <P class=src>GanttChart gantt = new GanttChart();</P><BR>2. Set 
              time unit of Gantt Chart. If the time unit is Week, it means each 
              scale in the time axis is stand for one week:<BR>
              <P class=src>gantt.setTimeUnit(TimeUnit.Week);</P><BR>3. you can 
              decorate you Gantt Chart through the configuration class "Config", 
              by setting the color, width, height for elements in Gantt Chart. 
              Since version 0.3.0, you can set the span of working days in each 
              week and span of working hours in each day. See more detail in the 
              API documentation.<BR>
              <P class=src>Config config = 
              gantt.getConfig();<BR>config.setWorkingTimeBackColor(Color.YELLOW);//Set 
              background color for working 
              time.<BR>config.setTimeUnitWidth(50);//Set width for time 
              unit<BR>config.setWorkingDaysSpanOfWeek(new int[]{Calendar.MONDAY, 
              Calendar.THURSDAY})//Set span of working days in each week<BR>... 
              </P>4. Create data model "GanttModel" for Gantt Chart, all tasks 
              information you want to display in GanttChart componenet are via 
              this model class.<BR>
              <P class=src>GanttModel model = new GanttModel();<BR></P>5. Set 
              start time and end time for schedule: 
              <P class=src>model.setKickoffTime(new GregorianCalendar(2008, 0, 
              1));<BR>model.setDeadline(new GregorianCalendar(2008, 0, 
              30));<BR></P><BR>6. Create basic element for Gantt Chart：Task. A 
              Task object shows as a bar in the Gantt Chart. Each Task object 
              can contains any sub tasks, to form a tree structure. If a Task 
              object contains sub tasks, it will be a Task group, which shows as 
              different shape in Gantt Chart. Following is a Task group 
              "taskGroup" with 2 sub tasks, "task1" and "task2": 
              <P class=src>Task taskGroup = new Task("My Work 1", new 
              GregorianCalendar(2008, 0, 1), new GregorianCalendar(2008, 0, 
              30));<BR>Task task1 = new Task("Sub-task 1", new 
              GregorianCalendar(2008, 0, 1), new GregorianCalendar(2008, 0, 
              5));<BR>Task task2 = new Task();<BR>task2.setName("Sub-task 
              2");<BR>task2.setStart(new GregorianCalendar(2008, 0, 
              6));<BR>task2.setEnd(new GregorianCalendar(2008, 0, 18));// Since 
              version 0.3.0, the end time set to a task is included in duration 
              of the task<BR><BR>taskGroup.add(new Task[]{task1, 
              task2});<BR></P><BR>7. Attach the dependency between tasks. If 
              task B must start after task A has completed, you should set task 
              A as predecessor task to task B： 
              <P class=src>task2.addPredecessor(task1);<BR></P><BR>8. Put the 
              main task group for schedule into model object, and set the model 
              object to GanttChart object： 
              <P class=src>model.addTask(taskGroup);<BR>gantt.setModel(model); 
              </P><BR>after that, you can see Gantt Chart displaying in the 
              SwiftGantt component. 
              <P class=src></H5></P></BLOCKQUOTE></TD></TR>
        <TR>
          <TD><B>&lt;2&gt;. Save Gantt Chart as image files.</B><BR>
            <BLOCKQUOTE>
              <H5>SwiftGantt is able to export Gantt Chart as png and jpeg 
              files. This functionality is especially useful for web 
              application. You can use SwiftGantt as image file generator at 
              server side, to generator images for you project schedule and 
              display in client browser. 
              <P class=src>static GanttChart gantt = new GanttChart(); 
              </P><BR>Initialize schedule information in Model: 
              <P class=src>GanttModel model = new GanttModel();<BR>... 
              </P><BR>Set Model to a singleton GanttChart instance: 
              <P class=src>gantt.setModel(model); </P><BR>Specify directory path 
              for exported image file: 
              <P class=src>String filePath = 
              "...";<BR>gantt.generateImageFile(filePath); </P><BR>after that, 
              you will find your GanttChart image file(s) at specified 
              directory: Warnning: The GanttChart compoment is not thread safe, 
              please synchronize method invocation on the singleton GanttChart 
              object. e.g. 
              <P 
              class=src>synchronized(gantt){<BR>&nbsp;&nbsp;&nbsp;&nbsp;gantt.setModel(model);<BR>&nbsp;&nbsp;&nbsp;&nbsp;gantt.generateImage(filePath);<BR>}<BR></P><BR></H5></BLOCKQUOTE></TD></TR>
        <TR>
          <TD></TD></TR></TBODY></TABLE></TD></TR>
  <TR>
    <TD><!-- Separate Bar --><IMG height=6 
      src="tutorials_en.files/hline_center.png" width=742 border=0> <!-- The Copyright -->
      <DIV id=copyright></DIV></TD></TR></TBODY></TABLE></DIV>
</BODY></HTML>
